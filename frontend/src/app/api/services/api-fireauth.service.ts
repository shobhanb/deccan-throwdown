/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createUserFireauthSignupPost } from '../fn/fireauth/create-user-fireauth-signup-post';
import { CreateUserFireauthSignupPost$Params } from '../fn/fireauth/create-user-fireauth-signup-post';
import { deleteUserFireauthUserUidDelete } from '../fn/fireauth/delete-user-fireauth-user-uid-delete';
import { DeleteUserFireauthUserUidDelete$Params } from '../fn/fireauth/delete-user-fireauth-user-uid-delete';
import { apiFirebaseUserRecord } from '../models/api-firebase-user-record';
import { getAllUsersFireauthAllGet } from '../fn/fireauth/get-all-users-fireauth-all-get';
import { GetAllUsersFireauthAllGet$Params } from '../fn/fireauth/get-all-users-fireauth-all-get';
import { getUserInfoFireauthUserUidGet } from '../fn/fireauth/get-user-info-fireauth-user-uid-get';
import { GetUserInfoFireauthUserUidGet$Params } from '../fn/fireauth/get-user-info-fireauth-user-uid-get';
import { updateUserAdminRightsFireauthChangeAdminUidPost } from '../fn/fireauth/update-user-admin-rights-fireauth-change-admin-uid-post';
import { UpdateUserAdminRightsFireauthChangeAdminUidPost$Params } from '../fn/fireauth/update-user-admin-rights-fireauth-change-admin-uid-post';

@Injectable({ providedIn: 'root' })
export class apiFireauthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createUserFireauthSignupPost()` */
  static readonly CreateUserFireauthSignupPostPath = '/fireauth/signup';

  /**
   * Create User.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUserFireauthSignupPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUserFireauthSignupPost$Response(params: CreateUserFireauthSignupPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return createUserFireauthSignupPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create User.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUserFireauthSignupPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUserFireauthSignupPost(params: CreateUserFireauthSignupPost$Params, context?: HttpContext): Observable<any> {
    return this.createUserFireauthSignupPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `updateUserAdminRightsFireauthChangeAdminUidPost()` */
  static readonly UpdateUserAdminRightsFireauthChangeAdminUidPostPath = '/fireauth/change-admin/{uid}';

  /**
   * Update User Admin Rights.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUserAdminRightsFireauthChangeAdminUidPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateUserAdminRightsFireauthChangeAdminUidPost$Response(params: UpdateUserAdminRightsFireauthChangeAdminUidPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return updateUserAdminRightsFireauthChangeAdminUidPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Update User Admin Rights.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUserAdminRightsFireauthChangeAdminUidPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateUserAdminRightsFireauthChangeAdminUidPost(params: UpdateUserAdminRightsFireauthChangeAdminUidPost$Params, context?: HttpContext): Observable<any> {
    return this.updateUserAdminRightsFireauthChangeAdminUidPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `getUserInfoFireauthUserUidGet()` */
  static readonly GetUserInfoFireauthUserUidGetPath = '/fireauth/user/{uid}';

  /**
   * Get User Info.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserInfoFireauthUserUidGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserInfoFireauthUserUidGet$Response(params: GetUserInfoFireauthUserUidGet$Params, context?: HttpContext): Observable<StrictHttpResponse<apiFirebaseUserRecord>> {
    return getUserInfoFireauthUserUidGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get User Info.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserInfoFireauthUserUidGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserInfoFireauthUserUidGet(params: GetUserInfoFireauthUserUidGet$Params, context?: HttpContext): Observable<apiFirebaseUserRecord> {
    return this.getUserInfoFireauthUserUidGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiFirebaseUserRecord>): apiFirebaseUserRecord => r.body)
    );
  }

  /** Path part for operation `deleteUserFireauthUserUidDelete()` */
  static readonly DeleteUserFireauthUserUidDeletePath = '/fireauth/user/{uid}';

  /**
   * Delete User.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUserFireauthUserUidDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserFireauthUserUidDelete$Response(params: DeleteUserFireauthUserUidDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return deleteUserFireauthUserUidDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete User.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUserFireauthUserUidDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserFireauthUserUidDelete(params: DeleteUserFireauthUserUidDelete$Params, context?: HttpContext): Observable<any> {
    return this.deleteUserFireauthUserUidDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `getAllUsersFireauthAllGet()` */
  static readonly GetAllUsersFireauthAllGetPath = '/fireauth/all';

  /**
   * Get All Users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsersFireauthAllGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsersFireauthAllGet$Response(params?: GetAllUsersFireauthAllGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiFirebaseUserRecord>>> {
    return getAllUsersFireauthAllGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get All Users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsersFireauthAllGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsersFireauthAllGet(params?: GetAllUsersFireauthAllGet$Params, context?: HttpContext): Observable<Array<apiFirebaseUserRecord>> {
    return this.getAllUsersFireauthAllGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiFirebaseUserRecord>>): Array<apiFirebaseUserRecord> => r.body)
    );
  }

}
