/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiAthleteOutputModel } from '../models/api-athlete-output-model';
import { createAthleteAthletesPost } from '../fn/athletes/create-athlete-athletes-post';
import { CreateAthleteAthletesPost$Params } from '../fn/athletes/create-athlete-athletes-post';
import { deleteAthleteAthletesAthleteIdDelete } from '../fn/athletes/delete-athlete-athletes-athlete-id-delete';
import { DeleteAthleteAthletesAthleteIdDelete$Params } from '../fn/athletes/delete-athlete-athletes-athlete-id-delete';
import { getAthleteAthletesAthleteIdGet } from '../fn/athletes/get-athlete-athletes-athlete-id-get';
import { GetAthleteAthletesAthleteIdGet$Params } from '../fn/athletes/get-athlete-athletes-athlete-id-get';
import { updateAthleteAthletesAthleteIdPatch } from '../fn/athletes/update-athlete-athletes-athlete-id-patch';
import { UpdateAthleteAthletesAthleteIdPatch$Params } from '../fn/athletes/update-athlete-athletes-athlete-id-patch';

@Injectable({ providedIn: 'root' })
export class apiAthletesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAthleteAthletesAthleteIdGet()` */
  static readonly GetAthleteAthletesAthleteIdGetPath = '/athletes/{athlete_id}';

  /**
   * Get Athlete.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAthleteAthletesAthleteIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAthleteAthletesAthleteIdGet$Response(params: GetAthleteAthletesAthleteIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<apiAthleteOutputModel>> {
    return getAthleteAthletesAthleteIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Athlete.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAthleteAthletesAthleteIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAthleteAthletesAthleteIdGet(params: GetAthleteAthletesAthleteIdGet$Params, context?: HttpContext): Observable<apiAthleteOutputModel> {
    return this.getAthleteAthletesAthleteIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiAthleteOutputModel>): apiAthleteOutputModel => r.body)
    );
  }

  /** Path part for operation `deleteAthleteAthletesAthleteIdDelete()` */
  static readonly DeleteAthleteAthletesAthleteIdDeletePath = '/athletes/{athlete_id}';

  /**
   * Delete Athlete.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAthleteAthletesAthleteIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAthleteAthletesAthleteIdDelete$Response(params: DeleteAthleteAthletesAthleteIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return deleteAthleteAthletesAthleteIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Athlete.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAthleteAthletesAthleteIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAthleteAthletesAthleteIdDelete(params: DeleteAthleteAthletesAthleteIdDelete$Params, context?: HttpContext): Observable<any> {
    return this.deleteAthleteAthletesAthleteIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `updateAthleteAthletesAthleteIdPatch()` */
  static readonly UpdateAthleteAthletesAthleteIdPatchPath = '/athletes/{athlete_id}';

  /**
   * Update Athlete.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAthleteAthletesAthleteIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAthleteAthletesAthleteIdPatch$Response(params: UpdateAthleteAthletesAthleteIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<apiAthleteOutputModel>> {
    return updateAthleteAthletesAthleteIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Athlete.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAthleteAthletesAthleteIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAthleteAthletesAthleteIdPatch(params: UpdateAthleteAthletesAthleteIdPatch$Params, context?: HttpContext): Observable<apiAthleteOutputModel> {
    return this.updateAthleteAthletesAthleteIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiAthleteOutputModel>): apiAthleteOutputModel => r.body)
    );
  }

  /** Path part for operation `createAthleteAthletesPost()` */
  static readonly CreateAthleteAthletesPostPath = '/athletes/';

  /**
   * Create Athlete.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createAthleteAthletesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAthleteAthletesPost$Response(params: CreateAthleteAthletesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<apiAthleteOutputModel>> {
    return createAthleteAthletesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Athlete.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createAthleteAthletesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAthleteAthletesPost(params: CreateAthleteAthletesPost$Params, context?: HttpContext): Observable<apiAthleteOutputModel> {
    return this.createAthleteAthletesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiAthleteOutputModel>): apiAthleteOutputModel => r.body)
    );
  }

}
