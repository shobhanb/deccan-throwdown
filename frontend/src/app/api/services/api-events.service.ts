/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createEventEventsPost } from '../fn/events/create-event-events-post';
import { CreateEventEventsPost$Params } from '../fn/events/create-event-events-post';
import { deleteEventEventsEventShortNameDelete } from '../fn/events/delete-event-events-event-short-name-delete';
import { DeleteEventEventsEventShortNameDelete$Params } from '../fn/events/delete-event-events-event-short-name-delete';
import { apiEventsModel } from '../models/api-events-model';
import { apiEventsModelTeamDetail } from '../models/api-events-model-team-detail';
import { apiEventsModelWodDetail } from '../models/api-events-model-wod-detail';
import { getEventAllTeamDataEventsTeamDataEventShortNameGet } from '../fn/events/get-event-all-team-data-events-team-data-event-short-name-get';
import { GetEventAllTeamDataEventsTeamDataEventShortNameGet$Params } from '../fn/events/get-event-all-team-data-events-team-data-event-short-name-get';
import { getEventAllWodDataEventsWodDataEventShortNameGet } from '../fn/events/get-event-all-wod-data-events-wod-data-event-short-name-get';
import { GetEventAllWodDataEventsWodDataEventShortNameGet$Params } from '../fn/events/get-event-all-wod-data-events-wod-data-event-short-name-get';
import { getEventInfoEventsEventShortNameGet } from '../fn/events/get-event-info-events-event-short-name-get';
import { GetEventInfoEventsEventShortNameGet$Params } from '../fn/events/get-event-info-events-event-short-name-get';
import { getEventsEventsGet } from '../fn/events/get-events-events-get';
import { GetEventsEventsGet$Params } from '../fn/events/get-events-events-get';
import { updateEventEventsEventShortNamePatch } from '../fn/events/update-event-events-event-short-name-patch';
import { UpdateEventEventsEventShortNamePatch$Params } from '../fn/events/update-event-events-event-short-name-patch';

@Injectable({ providedIn: 'root' })
export class apiEventsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getEventsEventsGet()` */
  static readonly GetEventsEventsGetPath = '/events/';

  /**
   * Get Events.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEventsEventsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEventsEventsGet$Response(params?: GetEventsEventsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiEventsModel>>> {
    return getEventsEventsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Events.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEventsEventsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEventsEventsGet(params?: GetEventsEventsGet$Params, context?: HttpContext): Observable<Array<apiEventsModel>> {
    return this.getEventsEventsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiEventsModel>>): Array<apiEventsModel> => r.body)
    );
  }

  /** Path part for operation `createEventEventsPost()` */
  static readonly CreateEventEventsPostPath = '/events/';

  /**
   * Create Event.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createEventEventsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createEventEventsPost$Response(params: CreateEventEventsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<apiEventsModel>> {
    return createEventEventsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Event.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createEventEventsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createEventEventsPost(params: CreateEventEventsPost$Params, context?: HttpContext): Observable<apiEventsModel> {
    return this.createEventEventsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiEventsModel>): apiEventsModel => r.body)
    );
  }

  /** Path part for operation `getEventInfoEventsEventShortNameGet()` */
  static readonly GetEventInfoEventsEventShortNameGetPath = '/events/{event_short_name}';

  /**
   * Get Event Info.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEventInfoEventsEventShortNameGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEventInfoEventsEventShortNameGet$Response(params: GetEventInfoEventsEventShortNameGet$Params, context?: HttpContext): Observable<StrictHttpResponse<apiEventsModel>> {
    return getEventInfoEventsEventShortNameGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Event Info.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEventInfoEventsEventShortNameGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEventInfoEventsEventShortNameGet(params: GetEventInfoEventsEventShortNameGet$Params, context?: HttpContext): Observable<apiEventsModel> {
    return this.getEventInfoEventsEventShortNameGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiEventsModel>): apiEventsModel => r.body)
    );
  }

  /** Path part for operation `deleteEventEventsEventShortNameDelete()` */
  static readonly DeleteEventEventsEventShortNameDeletePath = '/events/{event_short_name}';

  /**
   * Delete Event.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteEventEventsEventShortNameDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteEventEventsEventShortNameDelete$Response(params: DeleteEventEventsEventShortNameDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return deleteEventEventsEventShortNameDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Event.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteEventEventsEventShortNameDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteEventEventsEventShortNameDelete(params: DeleteEventEventsEventShortNameDelete$Params, context?: HttpContext): Observable<any> {
    return this.deleteEventEventsEventShortNameDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `updateEventEventsEventShortNamePatch()` */
  static readonly UpdateEventEventsEventShortNamePatchPath = '/events/{event_short_name}';

  /**
   * Update Event.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateEventEventsEventShortNamePatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateEventEventsEventShortNamePatch$Response(params: UpdateEventEventsEventShortNamePatch$Params, context?: HttpContext): Observable<StrictHttpResponse<apiEventsModel>> {
    return updateEventEventsEventShortNamePatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Event.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateEventEventsEventShortNamePatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateEventEventsEventShortNamePatch(params: UpdateEventEventsEventShortNamePatch$Params, context?: HttpContext): Observable<apiEventsModel> {
    return this.updateEventEventsEventShortNamePatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiEventsModel>): apiEventsModel => r.body)
    );
  }

  /** Path part for operation `getEventAllTeamDataEventsTeamDataEventShortNameGet()` */
  static readonly GetEventAllTeamDataEventsTeamDataEventShortNameGetPath = '/events/team_data/{event_short_name}';

  /**
   * Get Event All Team Data.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEventAllTeamDataEventsTeamDataEventShortNameGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEventAllTeamDataEventsTeamDataEventShortNameGet$Response(params: GetEventAllTeamDataEventsTeamDataEventShortNameGet$Params, context?: HttpContext): Observable<StrictHttpResponse<apiEventsModelTeamDetail>> {
    return getEventAllTeamDataEventsTeamDataEventShortNameGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Event All Team Data.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEventAllTeamDataEventsTeamDataEventShortNameGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEventAllTeamDataEventsTeamDataEventShortNameGet(params: GetEventAllTeamDataEventsTeamDataEventShortNameGet$Params, context?: HttpContext): Observable<apiEventsModelTeamDetail> {
    return this.getEventAllTeamDataEventsTeamDataEventShortNameGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiEventsModelTeamDetail>): apiEventsModelTeamDetail => r.body)
    );
  }

  /** Path part for operation `getEventAllWodDataEventsWodDataEventShortNameGet()` */
  static readonly GetEventAllWodDataEventsWodDataEventShortNameGetPath = '/events/wod_data/{event_short_name}';

  /**
   * Get Event All Wod Data.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEventAllWodDataEventsWodDataEventShortNameGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEventAllWodDataEventsWodDataEventShortNameGet$Response(params: GetEventAllWodDataEventsWodDataEventShortNameGet$Params, context?: HttpContext): Observable<StrictHttpResponse<apiEventsModelWodDetail>> {
    return getEventAllWodDataEventsWodDataEventShortNameGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Event All Wod Data.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEventAllWodDataEventsWodDataEventShortNameGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEventAllWodDataEventsWodDataEventShortNameGet(params: GetEventAllWodDataEventsWodDataEventShortNameGet$Params, context?: HttpContext): Observable<apiEventsModelWodDetail> {
    return this.getEventAllWodDataEventsWodDataEventShortNameGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiEventsModelWodDetail>): apiEventsModelWodDetail => r.body)
    );
  }

}
