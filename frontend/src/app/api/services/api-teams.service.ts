/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createTeamTeamsPost } from '../fn/teams/create-team-teams-post';
import { CreateTeamTeamsPost$Params } from '../fn/teams/create-team-teams-post';
import { deleteTeamTeamsTeamIdDelete } from '../fn/teams/delete-team-teams-team-id-delete';
import { DeleteTeamTeamsTeamIdDelete$Params } from '../fn/teams/delete-team-teams-team-id-delete';
import { getTeamInfoTeamsTeamIdGet } from '../fn/teams/get-team-info-teams-team-id-get';
import { GetTeamInfoTeamsTeamIdGet$Params } from '../fn/teams/get-team-info-teams-team-id-get';
import { getTeamsTeamsGet } from '../fn/teams/get-teams-teams-get';
import { GetTeamsTeamsGet$Params } from '../fn/teams/get-teams-teams-get';
import { registerTeamTeamsRegisterPost } from '../fn/teams/register-team-teams-register-post';
import { RegisterTeamTeamsRegisterPost$Params } from '../fn/teams/register-team-teams-register-post';
import { apiTeamRegistrationResponseModel } from '../models/api-team-registration-response-model';
import { apiTeamsOutputDetailModel } from '../models/api-teams-output-detail-model';
import { apiTeamsOutputModel } from '../models/api-teams-output-model';
import { updateTeamTeamsTeamIdPatch } from '../fn/teams/update-team-teams-team-id-patch';
import { UpdateTeamTeamsTeamIdPatch$Params } from '../fn/teams/update-team-teams-team-id-patch';

@Injectable({ providedIn: 'root' })
export class apiTeamsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTeamsTeamsGet()` */
  static readonly GetTeamsTeamsGetPath = '/teams/';

  /**
   * Get Teams.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTeamsTeamsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamsTeamsGet$Response(params: GetTeamsTeamsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiTeamsOutputDetailModel>>> {
    return getTeamsTeamsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Teams.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTeamsTeamsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamsTeamsGet(params: GetTeamsTeamsGet$Params, context?: HttpContext): Observable<Array<apiTeamsOutputDetailModel>> {
    return this.getTeamsTeamsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiTeamsOutputDetailModel>>): Array<apiTeamsOutputDetailModel> => r.body)
    );
  }

  /** Path part for operation `createTeamTeamsPost()` */
  static readonly CreateTeamTeamsPostPath = '/teams/';

  /**
   * Create Team.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTeamTeamsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTeamTeamsPost$Response(params: CreateTeamTeamsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<apiTeamsOutputModel>> {
    return createTeamTeamsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Team.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTeamTeamsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTeamTeamsPost(params: CreateTeamTeamsPost$Params, context?: HttpContext): Observable<apiTeamsOutputModel> {
    return this.createTeamTeamsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiTeamsOutputModel>): apiTeamsOutputModel => r.body)
    );
  }

  /** Path part for operation `getTeamInfoTeamsTeamIdGet()` */
  static readonly GetTeamInfoTeamsTeamIdGetPath = '/teams/{team_id}';

  /**
   * Get Team Info.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTeamInfoTeamsTeamIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamInfoTeamsTeamIdGet$Response(params: GetTeamInfoTeamsTeamIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<apiTeamsOutputDetailModel>> {
    return getTeamInfoTeamsTeamIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Team Info.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTeamInfoTeamsTeamIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamInfoTeamsTeamIdGet(params: GetTeamInfoTeamsTeamIdGet$Params, context?: HttpContext): Observable<apiTeamsOutputDetailModel> {
    return this.getTeamInfoTeamsTeamIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiTeamsOutputDetailModel>): apiTeamsOutputDetailModel => r.body)
    );
  }

  /** Path part for operation `deleteTeamTeamsTeamIdDelete()` */
  static readonly DeleteTeamTeamsTeamIdDeletePath = '/teams/{team_id}';

  /**
   * Delete Team.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTeamTeamsTeamIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTeamTeamsTeamIdDelete$Response(params: DeleteTeamTeamsTeamIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return deleteTeamTeamsTeamIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Team.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTeamTeamsTeamIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTeamTeamsTeamIdDelete(params: DeleteTeamTeamsTeamIdDelete$Params, context?: HttpContext): Observable<any> {
    return this.deleteTeamTeamsTeamIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `updateTeamTeamsTeamIdPatch()` */
  static readonly UpdateTeamTeamsTeamIdPatchPath = '/teams/{team_id}';

  /**
   * Update Team.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTeamTeamsTeamIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTeamTeamsTeamIdPatch$Response(params: UpdateTeamTeamsTeamIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<apiTeamsOutputModel>> {
    return updateTeamTeamsTeamIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Team.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTeamTeamsTeamIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTeamTeamsTeamIdPatch(params: UpdateTeamTeamsTeamIdPatch$Params, context?: HttpContext): Observable<apiTeamsOutputModel> {
    return this.updateTeamTeamsTeamIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiTeamsOutputModel>): apiTeamsOutputModel => r.body)
    );
  }

  /** Path part for operation `registerTeamTeamsRegisterPost()` */
  static readonly RegisterTeamTeamsRegisterPostPath = '/teams/register';

  /**
   * Register Team.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `registerTeamTeamsRegisterPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerTeamTeamsRegisterPost$Response(params: RegisterTeamTeamsRegisterPost$Params, context?: HttpContext): Observable<StrictHttpResponse<apiTeamRegistrationResponseModel>> {
    return registerTeamTeamsRegisterPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Register Team.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `registerTeamTeamsRegisterPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerTeamTeamsRegisterPost(params: RegisterTeamTeamsRegisterPost$Params, context?: HttpContext): Observable<apiTeamRegistrationResponseModel> {
    return this.registerTeamTeamsRegisterPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiTeamRegistrationResponseModel>): apiTeamRegistrationResponseModel => r.body)
    );
  }

}
