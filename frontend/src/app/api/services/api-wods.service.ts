/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createWodWodsPost } from '../fn/wods/create-wod-wods-post';
import { CreateWodWodsPost$Params } from '../fn/wods/create-wod-wods-post';
import { deleteWodWodsWodIdDelete } from '../fn/wods/delete-wod-wods-wod-id-delete';
import { DeleteWodWodsWodIdDelete$Params } from '../fn/wods/delete-wod-wods-wod-id-delete';
import { getWodsWodsGet } from '../fn/wods/get-wods-wods-get';
import { GetWodsWodsGet$Params } from '../fn/wods/get-wods-wods-get';
import { getWodWodsWodIdGet } from '../fn/wods/get-wod-wods-wod-id-get';
import { GetWodWodsWodIdGet$Params } from '../fn/wods/get-wod-wods-wod-id-get';
import { updateWodWodsWodIdPatch } from '../fn/wods/update-wod-wods-wod-id-patch';
import { UpdateWodWodsWodIdPatch$Params } from '../fn/wods/update-wod-wods-wod-id-patch';
import { apiWodOutputModel } from '../models/api-wod-output-model';

@Injectable({ providedIn: 'root' })
export class apiWodsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getWodsWodsGet()` */
  static readonly GetWodsWodsGetPath = '/wods/';

  /**
   * Get Wods.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWodsWodsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWodsWodsGet$Response(params: GetWodsWodsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiWodOutputModel>>> {
    return getWodsWodsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Wods.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWodsWodsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWodsWodsGet(params: GetWodsWodsGet$Params, context?: HttpContext): Observable<Array<apiWodOutputModel>> {
    return this.getWodsWodsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiWodOutputModel>>): Array<apiWodOutputModel> => r.body)
    );
  }

  /** Path part for operation `createWodWodsPost()` */
  static readonly CreateWodWodsPostPath = '/wods/';

  /**
   * Create Wod.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createWodWodsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createWodWodsPost$Response(params: CreateWodWodsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<apiWodOutputModel>> {
    return createWodWodsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Wod.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createWodWodsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createWodWodsPost(params: CreateWodWodsPost$Params, context?: HttpContext): Observable<apiWodOutputModel> {
    return this.createWodWodsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiWodOutputModel>): apiWodOutputModel => r.body)
    );
  }

  /** Path part for operation `getWodWodsWodIdGet()` */
  static readonly GetWodWodsWodIdGetPath = '/wods/{wod_id}';

  /**
   * Get Wod.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWodWodsWodIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWodWodsWodIdGet$Response(params: GetWodWodsWodIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<apiWodOutputModel>> {
    return getWodWodsWodIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Wod.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWodWodsWodIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWodWodsWodIdGet(params: GetWodWodsWodIdGet$Params, context?: HttpContext): Observable<apiWodOutputModel> {
    return this.getWodWodsWodIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiWodOutputModel>): apiWodOutputModel => r.body)
    );
  }

  /** Path part for operation `deleteWodWodsWodIdDelete()` */
  static readonly DeleteWodWodsWodIdDeletePath = '/wods/{wod_id}';

  /**
   * Delete Wod.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteWodWodsWodIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteWodWodsWodIdDelete$Response(params: DeleteWodWodsWodIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return deleteWodWodsWodIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Wod.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteWodWodsWodIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteWodWodsWodIdDelete(params: DeleteWodWodsWodIdDelete$Params, context?: HttpContext): Observable<any> {
    return this.deleteWodWodsWodIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `updateWodWodsWodIdPatch()` */
  static readonly UpdateWodWodsWodIdPatchPath = '/wods/{wod_id}';

  /**
   * Update Wod.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateWodWodsWodIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateWodWodsWodIdPatch$Response(params: UpdateWodWodsWodIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<apiWodOutputModel>> {
    return updateWodWodsWodIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Wod.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateWodWodsWodIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateWodWodsWodIdPatch(params: UpdateWodWodsWodIdPatch$Params, context?: HttpContext): Observable<apiWodOutputModel> {
    return this.updateWodWodsWodIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiWodOutputModel>): apiWodOutputModel => r.body)
    );
  }

}
