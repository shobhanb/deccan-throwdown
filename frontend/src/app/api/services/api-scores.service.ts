/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createScoreScoresPost } from '../fn/scores/create-score-scores-post';
import { CreateScoreScoresPost$Params } from '../fn/scores/create-score-scores-post';
import { deleteScoreScoresScoreIdDelete } from '../fn/scores/delete-score-scores-score-id-delete';
import { DeleteScoreScoresScoreIdDelete$Params } from '../fn/scores/delete-score-scores-score-id-delete';
import { getScoresScoresGet } from '../fn/scores/get-scores-scores-get';
import { GetScoresScoresGet$Params } from '../fn/scores/get-scores-scores-get';
import { apiScoreOutputModel } from '../models/api-score-output-model';
import { updateEventRanksScoresUpdateRanksPut } from '../fn/scores/update-event-ranks-scores-update-ranks-put';
import { UpdateEventRanksScoresUpdateRanksPut$Params } from '../fn/scores/update-event-ranks-scores-update-ranks-put';
import { updateScoreScoresScoreIdPatch } from '../fn/scores/update-score-scores-score-id-patch';
import { UpdateScoreScoresScoreIdPatch$Params } from '../fn/scores/update-score-scores-score-id-patch';
import { updateScoreVerificationScoresVerifyScoreIdPatch } from '../fn/scores/update-score-verification-scores-verify-score-id-patch';
import { UpdateScoreVerificationScoresVerifyScoreIdPatch$Params } from '../fn/scores/update-score-verification-scores-verify-score-id-patch';

@Injectable({ providedIn: 'root' })
export class apiScoresService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getScoresScoresGet()` */
  static readonly GetScoresScoresGetPath = '/scores/';

  /**
   * Get Scores.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getScoresScoresGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getScoresScoresGet$Response(params: GetScoresScoresGet$Params, context?: HttpContext): Observable<StrictHttpResponse<apiScoreOutputModel>> {
    return getScoresScoresGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Scores.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getScoresScoresGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getScoresScoresGet(params: GetScoresScoresGet$Params, context?: HttpContext): Observable<apiScoreOutputModel> {
    return this.getScoresScoresGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiScoreOutputModel>): apiScoreOutputModel => r.body)
    );
  }

  /** Path part for operation `createScoreScoresPost()` */
  static readonly CreateScoreScoresPostPath = '/scores/';

  /**
   * Create Score.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createScoreScoresPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createScoreScoresPost$Response(params: CreateScoreScoresPost$Params, context?: HttpContext): Observable<StrictHttpResponse<apiScoreOutputModel>> {
    return createScoreScoresPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Score.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createScoreScoresPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createScoreScoresPost(params: CreateScoreScoresPost$Params, context?: HttpContext): Observable<apiScoreOutputModel> {
    return this.createScoreScoresPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiScoreOutputModel>): apiScoreOutputModel => r.body)
    );
  }

  /** Path part for operation `deleteScoreScoresScoreIdDelete()` */
  static readonly DeleteScoreScoresScoreIdDeletePath = '/scores/{score_id}';

  /**
   * Delete Score.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteScoreScoresScoreIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteScoreScoresScoreIdDelete$Response(params: DeleteScoreScoresScoreIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return deleteScoreScoresScoreIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Score.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteScoreScoresScoreIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteScoreScoresScoreIdDelete(params: DeleteScoreScoresScoreIdDelete$Params, context?: HttpContext): Observable<any> {
    return this.deleteScoreScoresScoreIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `updateScoreScoresScoreIdPatch()` */
  static readonly UpdateScoreScoresScoreIdPatchPath = '/scores/{score_id}';

  /**
   * Update Score.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateScoreScoresScoreIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateScoreScoresScoreIdPatch$Response(params: UpdateScoreScoresScoreIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<apiScoreOutputModel>> {
    return updateScoreScoresScoreIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Score.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateScoreScoresScoreIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateScoreScoresScoreIdPatch(params: UpdateScoreScoresScoreIdPatch$Params, context?: HttpContext): Observable<apiScoreOutputModel> {
    return this.updateScoreScoresScoreIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiScoreOutputModel>): apiScoreOutputModel => r.body)
    );
  }

  /** Path part for operation `updateScoreVerificationScoresVerifyScoreIdPatch()` */
  static readonly UpdateScoreVerificationScoresVerifyScoreIdPatchPath = '/scores/verify/{score_id}';

  /**
   * Update Score Verification.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateScoreVerificationScoresVerifyScoreIdPatch()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateScoreVerificationScoresVerifyScoreIdPatch$Response(params: UpdateScoreVerificationScoresVerifyScoreIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<apiScoreOutputModel>> {
    return updateScoreVerificationScoresVerifyScoreIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Score Verification.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateScoreVerificationScoresVerifyScoreIdPatch$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateScoreVerificationScoresVerifyScoreIdPatch(params: UpdateScoreVerificationScoresVerifyScoreIdPatch$Params, context?: HttpContext): Observable<apiScoreOutputModel> {
    return this.updateScoreVerificationScoresVerifyScoreIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiScoreOutputModel>): apiScoreOutputModel => r.body)
    );
  }

  /** Path part for operation `updateEventRanksScoresUpdateRanksPut()` */
  static readonly UpdateEventRanksScoresUpdateRanksPutPath = '/scores/update-ranks';

  /**
   * Update Event Ranks.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateEventRanksScoresUpdateRanksPut()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateEventRanksScoresUpdateRanksPut$Response(params: UpdateEventRanksScoresUpdateRanksPut$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return updateEventRanksScoresUpdateRanksPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Event Ranks.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateEventRanksScoresUpdateRanksPut$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateEventRanksScoresUpdateRanksPut(params: UpdateEventRanksScoresUpdateRanksPut$Params, context?: HttpContext): Observable<any> {
    return this.updateEventRanksScoresUpdateRanksPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}
