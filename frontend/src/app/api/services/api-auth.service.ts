/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { authDbLoginAuthLoginPost } from '../fn/auth/auth-db-login-auth-login-post';
import { AuthDbLoginAuthLoginPost$Params } from '../fn/auth/auth-db-login-auth-login-post';
import { authDbLogoutAuthLogoutPost } from '../fn/auth/auth-db-logout-auth-logout-post';
import { AuthDbLogoutAuthLogoutPost$Params } from '../fn/auth/auth-db-logout-auth-logout-post';
import { apiBearerResponse } from '../models/api-bearer-response';
import { getUsersAuthUsersGet } from '../fn/auth/get-users-auth-users-get';
import { GetUsersAuthUsersGet$Params } from '../fn/auth/get-users-auth-users-get';
import { registerRegisterAuthRegisterPost } from '../fn/auth/register-register-auth-register-post';
import { RegisterRegisterAuthRegisterPost$Params } from '../fn/auth/register-register-auth-register-post';
import { resetForgotPasswordAuthForgotPasswordPost } from '../fn/auth/reset-forgot-password-auth-forgot-password-post';
import { ResetForgotPasswordAuthForgotPasswordPost$Params } from '../fn/auth/reset-forgot-password-auth-forgot-password-post';
import { resetResetPasswordAuthResetPasswordPost } from '../fn/auth/reset-reset-password-auth-reset-password-post';
import { ResetResetPasswordAuthResetPasswordPost$Params } from '../fn/auth/reset-reset-password-auth-reset-password-post';
import { apiUserRead } from '../models/api-user-read';
import { usersCurrentUserAuthMeGet } from '../fn/auth/users-current-user-auth-me-get';
import { UsersCurrentUserAuthMeGet$Params } from '../fn/auth/users-current-user-auth-me-get';
import { usersDeleteUserAuthIdDelete } from '../fn/auth/users-delete-user-auth-id-delete';
import { UsersDeleteUserAuthIdDelete$Params } from '../fn/auth/users-delete-user-auth-id-delete';
import { usersPatchCurrentUserAuthMePatch } from '../fn/auth/users-patch-current-user-auth-me-patch';
import { UsersPatchCurrentUserAuthMePatch$Params } from '../fn/auth/users-patch-current-user-auth-me-patch';
import { usersPatchUserAuthIdPatch } from '../fn/auth/users-patch-user-auth-id-patch';
import { UsersPatchUserAuthIdPatch$Params } from '../fn/auth/users-patch-user-auth-id-patch';
import { usersUserAuthIdGet } from '../fn/auth/users-user-auth-id-get';
import { UsersUserAuthIdGet$Params } from '../fn/auth/users-user-auth-id-get';
import { verifyRequestTokenAuthRequestVerifyTokenPost } from '../fn/auth/verify-request-token-auth-request-verify-token-post';
import { VerifyRequestTokenAuthRequestVerifyTokenPost$Params } from '../fn/auth/verify-request-token-auth-request-verify-token-post';
import { verifyVerifyAuthVerifyPost } from '../fn/auth/verify-verify-auth-verify-post';
import { VerifyVerifyAuthVerifyPost$Params } from '../fn/auth/verify-verify-auth-verify-post';

@Injectable({ providedIn: 'root' })
export class apiAuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getUsersAuthUsersGet()` */
  static readonly GetUsersAuthUsersGetPath = '/auth/users';

  /**
   * Get Users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUsersAuthUsersGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersAuthUsersGet$Response(params?: GetUsersAuthUsersGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiUserRead>>> {
    return getUsersAuthUsersGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUsersAuthUsersGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersAuthUsersGet(params?: GetUsersAuthUsersGet$Params, context?: HttpContext): Observable<Array<apiUserRead>> {
    return this.getUsersAuthUsersGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiUserRead>>): Array<apiUserRead> => r.body)
    );
  }

  /** Path part for operation `authDbLoginAuthLoginPost()` */
  static readonly AuthDbLoginAuthLoginPostPath = '/auth/login';

  /**
   * Auth:Db.Login.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authDbLoginAuthLoginPost()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  authDbLoginAuthLoginPost$Response(params: AuthDbLoginAuthLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<apiBearerResponse>> {
    return authDbLoginAuthLoginPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Auth:Db.Login.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authDbLoginAuthLoginPost$Response()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  authDbLoginAuthLoginPost(params: AuthDbLoginAuthLoginPost$Params, context?: HttpContext): Observable<apiBearerResponse> {
    return this.authDbLoginAuthLoginPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiBearerResponse>): apiBearerResponse => r.body)
    );
  }

  /** Path part for operation `authDbLogoutAuthLogoutPost()` */
  static readonly AuthDbLogoutAuthLogoutPostPath = '/auth/logout';

  /**
   * Auth:Db.Logout.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authDbLogoutAuthLogoutPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  authDbLogoutAuthLogoutPost$Response(params?: AuthDbLogoutAuthLogoutPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return authDbLogoutAuthLogoutPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Auth:Db.Logout.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authDbLogoutAuthLogoutPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authDbLogoutAuthLogoutPost(params?: AuthDbLogoutAuthLogoutPost$Params, context?: HttpContext): Observable<any> {
    return this.authDbLogoutAuthLogoutPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `registerRegisterAuthRegisterPost()` */
  static readonly RegisterRegisterAuthRegisterPostPath = '/auth/register';

  /**
   * Register:Register.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `registerRegisterAuthRegisterPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerRegisterAuthRegisterPost$Response(params: RegisterRegisterAuthRegisterPost$Params, context?: HttpContext): Observable<StrictHttpResponse<apiUserRead>> {
    return registerRegisterAuthRegisterPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Register:Register.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `registerRegisterAuthRegisterPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerRegisterAuthRegisterPost(params: RegisterRegisterAuthRegisterPost$Params, context?: HttpContext): Observable<apiUserRead> {
    return this.registerRegisterAuthRegisterPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiUserRead>): apiUserRead => r.body)
    );
  }

  /** Path part for operation `verifyRequestTokenAuthRequestVerifyTokenPost()` */
  static readonly VerifyRequestTokenAuthRequestVerifyTokenPostPath = '/auth/request-verify-token';

  /**
   * Verify:Request-Token.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `verifyRequestTokenAuthRequestVerifyTokenPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verifyRequestTokenAuthRequestVerifyTokenPost$Response(params: VerifyRequestTokenAuthRequestVerifyTokenPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return verifyRequestTokenAuthRequestVerifyTokenPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Verify:Request-Token.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `verifyRequestTokenAuthRequestVerifyTokenPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verifyRequestTokenAuthRequestVerifyTokenPost(params: VerifyRequestTokenAuthRequestVerifyTokenPost$Params, context?: HttpContext): Observable<any> {
    return this.verifyRequestTokenAuthRequestVerifyTokenPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `verifyVerifyAuthVerifyPost()` */
  static readonly VerifyVerifyAuthVerifyPostPath = '/auth/verify';

  /**
   * Verify:Verify.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `verifyVerifyAuthVerifyPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verifyVerifyAuthVerifyPost$Response(params: VerifyVerifyAuthVerifyPost$Params, context?: HttpContext): Observable<StrictHttpResponse<apiUserRead>> {
    return verifyVerifyAuthVerifyPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Verify:Verify.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `verifyVerifyAuthVerifyPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verifyVerifyAuthVerifyPost(params: VerifyVerifyAuthVerifyPost$Params, context?: HttpContext): Observable<apiUserRead> {
    return this.verifyVerifyAuthVerifyPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiUserRead>): apiUserRead => r.body)
    );
  }

  /** Path part for operation `resetForgotPasswordAuthForgotPasswordPost()` */
  static readonly ResetForgotPasswordAuthForgotPasswordPostPath = '/auth/forgot-password';

  /**
   * Reset:Forgot Password.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `resetForgotPasswordAuthForgotPasswordPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  resetForgotPasswordAuthForgotPasswordPost$Response(params: ResetForgotPasswordAuthForgotPasswordPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return resetForgotPasswordAuthForgotPasswordPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Reset:Forgot Password.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `resetForgotPasswordAuthForgotPasswordPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  resetForgotPasswordAuthForgotPasswordPost(params: ResetForgotPasswordAuthForgotPasswordPost$Params, context?: HttpContext): Observable<any> {
    return this.resetForgotPasswordAuthForgotPasswordPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `resetResetPasswordAuthResetPasswordPost()` */
  static readonly ResetResetPasswordAuthResetPasswordPostPath = '/auth/reset-password';

  /**
   * Reset:Reset Password.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `resetResetPasswordAuthResetPasswordPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  resetResetPasswordAuthResetPasswordPost$Response(params: ResetResetPasswordAuthResetPasswordPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return resetResetPasswordAuthResetPasswordPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Reset:Reset Password.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `resetResetPasswordAuthResetPasswordPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  resetResetPasswordAuthResetPasswordPost(params: ResetResetPasswordAuthResetPasswordPost$Params, context?: HttpContext): Observable<any> {
    return this.resetResetPasswordAuthResetPasswordPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `usersCurrentUserAuthMeGet()` */
  static readonly UsersCurrentUserAuthMeGetPath = '/auth/me';

  /**
   * Users:Current User.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersCurrentUserAuthMeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersCurrentUserAuthMeGet$Response(params?: UsersCurrentUserAuthMeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<apiUserRead>> {
    return usersCurrentUserAuthMeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Users:Current User.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersCurrentUserAuthMeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersCurrentUserAuthMeGet(params?: UsersCurrentUserAuthMeGet$Params, context?: HttpContext): Observable<apiUserRead> {
    return this.usersCurrentUserAuthMeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiUserRead>): apiUserRead => r.body)
    );
  }

  /** Path part for operation `usersPatchCurrentUserAuthMePatch()` */
  static readonly UsersPatchCurrentUserAuthMePatchPath = '/auth/me';

  /**
   * Users:Patch Current User.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersPatchCurrentUserAuthMePatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPatchCurrentUserAuthMePatch$Response(params: UsersPatchCurrentUserAuthMePatch$Params, context?: HttpContext): Observable<StrictHttpResponse<apiUserRead>> {
    return usersPatchCurrentUserAuthMePatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Users:Patch Current User.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersPatchCurrentUserAuthMePatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPatchCurrentUserAuthMePatch(params: UsersPatchCurrentUserAuthMePatch$Params, context?: HttpContext): Observable<apiUserRead> {
    return this.usersPatchCurrentUserAuthMePatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiUserRead>): apiUserRead => r.body)
    );
  }

  /** Path part for operation `usersUserAuthIdGet()` */
  static readonly UsersUserAuthIdGetPath = '/auth/{id}';

  /**
   * Users:User.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersUserAuthIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersUserAuthIdGet$Response(params: UsersUserAuthIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<apiUserRead>> {
    return usersUserAuthIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Users:User.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersUserAuthIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersUserAuthIdGet(params: UsersUserAuthIdGet$Params, context?: HttpContext): Observable<apiUserRead> {
    return this.usersUserAuthIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiUserRead>): apiUserRead => r.body)
    );
  }

  /** Path part for operation `usersDeleteUserAuthIdDelete()` */
  static readonly UsersDeleteUserAuthIdDeletePath = '/auth/{id}';

  /**
   * Users:Delete User.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersDeleteUserAuthIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersDeleteUserAuthIdDelete$Response(params: UsersDeleteUserAuthIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return usersDeleteUserAuthIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Users:Delete User.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersDeleteUserAuthIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersDeleteUserAuthIdDelete(params: UsersDeleteUserAuthIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.usersDeleteUserAuthIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `usersPatchUserAuthIdPatch()` */
  static readonly UsersPatchUserAuthIdPatchPath = '/auth/{id}';

  /**
   * Users:Patch User.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersPatchUserAuthIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPatchUserAuthIdPatch$Response(params: UsersPatchUserAuthIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<apiUserRead>> {
    return usersPatchUserAuthIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Users:Patch User.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersPatchUserAuthIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPatchUserAuthIdPatch(params: UsersPatchUserAuthIdPatch$Params, context?: HttpContext): Observable<apiUserRead> {
    return this.usersPatchUserAuthIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiUserRead>): apiUserRead => r.body)
    );
  }

}
